Memory Management
Liora Wachsstock

Compilation and running the program:
make
./oss [-t sec] [-h] [-l filename] [-p numberProcesses]

-t with argument allows the user to set the time for how long the program will run for
-h prints a help message and terminates
-l with argument allows user to set the name of the logfile
-p with argument tells how many user processes to add, up to NUM_PROCESSES that can can be configured in config.h

**************************************************************************************
Files:
messenger.c, messenger.h: holds functions for passing messenges back and forth between oss and userproceses

pcb_table.c, pcb_table.h: holds functions for CRUD operations for pcb table.

queue.c, queue.h: holds funcitons for CRUD operations for process scheduling queues

clock.c, clock.h: holds functions for CRUD operations (including shared memory and semaphore initializations) for clock functionality

userprocess.c: userprocess binary

oss.c, oss.h: main memory management code

config.h: constants

****************************************************************************
Notes: 
Shift internval, reads vs. writes, and probablilty that the user process will request invalid memory are defined in config.h

Outstanding Problems: 
None known.


Report: 
Professor Bhatia said the report should be any clarifications that need to be made. I believe I made most of them above.
Per the project specifications, I used an Additional Reference Bits algorithm for the page replacement algorithm.

Git Log: 
See File "Version"
